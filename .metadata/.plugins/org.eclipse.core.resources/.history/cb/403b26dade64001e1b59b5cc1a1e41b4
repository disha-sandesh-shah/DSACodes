import java.util.*;

public class Queues {
	static class Node {
		int data;
		Node next;
		
		public Node(int data) {
			this.data = data;
			this.next = null;
		}
	}
	
	static class QueueLL {
		static Node head = null;
		static Node tail = null;
		
		public static boolean isEmpty() {
			return head == null;
		}
		
		public static void add(int data) {
			Node newNode = new Node(data);
			if(head == null) {
				head = tail = newNode;
				return;
			}
			
			tail.next = newNode;
			tail = newNode;
		}
		
		public static int remove() {
			if(isEmpty()) {
				return -1;
			}
			
			if(head == tail) {
				int val = head.data;
				head = tail = null;
				return val;
			}
			
			int val = head.data;
			head = head.next;
			return val;
		}
		
		public static int peek() {
			if(isEmpty()) {
				return -1;
			}
			
			return head.data;
		}
	}
	
	static class CirQueue {
		static int arr[];
		static int size;
		static int front;
		static int rear;
		
		public CirQueue(int n) {
			arr = new int[n];
			size = n;
			front = -1;
			rear = -1;
		}
		
		public static boolean isEmpty() {
			return front == -1 && rear == -1;
		}
		
		public static boolean isFull() {
			return (rear+1)%size == front;
		}
		
		public static void add(int data) {
			if(isFull()) {
				System.out.println("Queue is Full");
				return;
			}
			
			if(front == -1) {
				front = 0;
			}
			
			rear = (rear + 1) % size;
			arr[rear] = data;
		}
		
		public static int remove() {
			if(isEmpty()) {
				return -1;
			}
			
			int result = arr[front];
			if(front == rear) {
				front = rear = -1;
			} else {
				front = (front + 1) % size;
			}
			
			return result;
		}
		
		public static int peek() {
			if(isEmpty()) {
				return -1;
			}
			
			return arr[front];
		}
	}
	static class QueueArr {
		static int arr[];
		static int size;
		static int rear;
		
		public QueueArr(int n) {
			arr = new int[n];
			size = n;
			rear = -1;
		}
		
		public static boolean isEmpty() {
			return rear == -1;
		}
		
		public static void add(int data) {
			if(rear == size-1) {
				System.out.println("Queue is full");
				return;
			}
			
			rear = rear + 1;
			arr[rear] = data;
		}
		
		public static int remove() {
			if(isEmpty()) {
				return -1;
			}
			
			int front = arr[0];	
			for(int i=0; i<rear; i++) {
				arr[i] = arr[i+1];
			}
			rear = rear - 1;
			
			return front;
		}
		
		public static int peek() {
			if(isEmpty()) {
				return -1;
			}
			
			return arr[0];
		}
	}
	
	static class StackQu {
		static Queue<Integer> q1 = new LinkedList<>();
		static Queue<Integer> q2 = new LinkedList<>();
		
		public static boolean isEmpty() {
			return q1.isEmpty() && q2.isEmpty();
		}
		
		public static void push(int data) {
			if(!q1.isEmpty()) {
				q1.add(data);
			} else {
				q2.add(data);
			}
		}
		
		public static int pop() {
			if(isEmpty()) {
				return -1;
			}
			
			int top = -1;
			if(!q1.isEmpty()) {
				while(!q1.isEmpty()) {
					top = q1.remove();
					if(q1.isEmpty()) {
						break;
					}
					q2.add(top);
				}
			} else {
				while(!q2.isEmpty()) {
					top = q2.remove();
					if(q2.isEmpty()) {
						break;	
					}
					q1.add(top);
				}
			}
			
			return top;
		}
		
		public static int peek() {
			if(isEmpty()) {
				return -1;
			}
			
			int top = -1;
			if(!q1.isEmpty()) {
				while(!q1.isEmpty()) {
					top = q1.remove();
					q2.add(top);
				}
			} else {
				while(!q2.isEmpty()) {
					top = q2.remove();
					q1.add(top);
				}
			}
			
			return top;
		}
	}
	
	static class QueueSt {
		static Stack<Integer> s1 = new Stack<>();
		static Stack<Integer> s2 = new Stack<>();
		
		public static boolean isEmpty() {
			return s1.isEmpty();
		}
		
		public static void add(int data) {
			while(!s1.isEmpty()) {
				s2.push(s1.pop());
			}
			
			s1.add(data);
			
			while(!s2.isEmpty()) {
				s1.push(s2.pop());
			}
		}
		
		public static int remove() {
			return s1.pop();
		}
		
		public static int peek() {
			return s1.peek();
		}
	}
	
	public static void firstNonRepeating(String str) {
		int freq[] = new int[26];
		Queue<Character> q = new LinkedList<>();
		
		for(int i=0; i<str.length(); i++) {
			char ch = str.charAt(i);
			freq[ch-'a']++;
			q.add(ch);
			
			while(!q.isEmpty() && freq[q.peek()-'a'] > 1) {
				q.remove();
			}
			
			if(q.isEmpty()) {
				System.out.print(-1 + " ");
			} else {
				System.out.print(q.peek() + " ");
			}
		}
	}
	
	public static void reverse(Queue<Integer> q) {
		Stack<Integer> s = new Stack<>();
		
		while(!q.isEmpty()) {
			s.push(q.remove());
		}
		
		while(!s.isEmpty()) {
			q.add(s.pop());
		}
	}
	
	public static void interLeave(Queue<Integer> q) {
		Queue<Integer> firstHalf = new LinkedList<>();
		int size = q.size();
		
		for(int i=0; i<size/2; i++) {
			firstHalf.add(q.remove());
		}
		
		while(!firstHalf.isEmpty()) {
			q.add(firstHalf.remove());
			q.add(q.remove());
		}
	}
	
	static class StackDe {
		static Deque<Integer> deque = new LinkedList<>();
		
		public void push(int data) {
			deque.addLast(data);
		}
		
		public int pop() {
			return deque.removeLast();
		}
		
		public int peek() {
			return deque.getLast();
		}
	}
	
	static class QueueDe {
        static Deque<Integer> deque = new LinkedList<>();
		
		public void add(int data) {
			deque.addLast(data);
		}
		
		public int remove() {
			return deque.removeFirst();
		}
		
		public int peek() {
			return deque.getFirst();
		}
	}
	
	public static void main(String args[]) {
//		QueueLL q = new QueueLL();
//		q.add(1);
//		q.add(2);
//		q.add(3);
//		
		
//		StackQu s = new StackQu();
//		s.push(1);
//		s.push(2);
//		s.push(3);
//		
//		while(!s.isEmpty()) {
//			System.out.print(s.peek() + " ");
//			s.pop();
//		}
//		System.out.println();
		
//		firstNonRepeating("aabccxb");
		
//		Queue<Integer> q = new LinkedList<>();
//		q.add(1);
//		q.add(2);
//		q.add(3);
//		q.add(4);
//		
//		reverse(q);
//		
//		while(!q.isEmpty()) {
//			System.out.print(q.remove() + " ");
//		}
		
		StackDe s = new StackDe();
		s.push(1);
		s.push(2);
		s.push(3);
		System.out.println(s.peek());
		System.out.println(s.pop());
		System.out.println(s.pop());
		System.out.println(s.pop());
		
		QueueDe q = new QueueDe();
		q.add(1);
		q.add(2);
		q.add(3);
		System.out.println(q.peek());
		System.out.println(q.remove());
		System.out.println(q.remove());
		System.out.println(q.remove());
		
	}
}