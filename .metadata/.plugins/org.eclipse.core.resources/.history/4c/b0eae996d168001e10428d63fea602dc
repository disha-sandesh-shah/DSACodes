import java.util.*;

public class BinTree {
	static class Node {
		int data;
		Node right;
		Node left;
		
		public Node(int data) {
			this.data = data;
			this.left = null;
			this.right = null;
		}
	}
	
	public static boolean isIdentical(Node node, Node subroot) {
		if(node == null && subroot == null) {
			return true;
		} else if(node == null || subroot == null || node.data != subroot.data) {
			return false;
		}
		
		if(!isIdentical(node.left, subroot.left)) {
			return false;
		}
		if(!isIdentical(node.right, subroot.right)) {
			return false;
		}
		
		return true;
	}
	
	public static boolean isSubtree(Node root, Node subroot) {
		if(root == null) {
			return false;
		}
		
		if(root.data == subroot.data) {
			if(isIdentical(root, subroot)) {
				return true;
			}
		}
		
		return isSubtree(root.left, subroot) || isSubtree(root.right, subroot);
	}
	
	static class BinaryTree {
//		static int idx = -1;
//		
//		public static Node buildTree(int nodes[]) {
//			idx++;
//			if(nodes[idx] == -1) {
//				return null;
//			}
//			
//			Node newNode = new Node(nodes[idx]);
//			newNode.left = buildTree(nodes);
//			newNode.right = buildTree(nodes);
//			
//			return newNode;
//		}
//		
//		public static void preorder(Node root) {
//			if(root == null) {
//				return;
//			}
//			
//			System.out.print(root.data + " ");
//			preorder(root.left);
//			preorder(root.right);
//		}
//		
//		public static void inorder(Node root) {
//			if(root == null) {
//				return;
//			}
//			
//			inorder(root.left);
//			System.out.print(root.data + " ");
//			inorder(root.right);
//		}
//		
//		public static void postorder(Node root) {
//			if(root == null) {
//				return;
//			}
//			
//			postorder(root.left);
//			postorder(root.right);
//			System.out.print(root.data + " ");
//		}
//		
//		public static void levelOrder(Node root) {
//			if(root == null) {
//				return;
//			}
//			
//			Queue<Node> q = new LinkedList<>();
//			q.add(root);
//			q.add(null);
//			
//			while(!q.isEmpty()) {
//				Node curr = q.remove();
//				if(curr == null) {
//					System.out.println();
//					if(q.isEmpty()) {
//						break;
//					} else {
//						q.add(null);
//					}
//				} else {
//					System.out.print(curr.data + " ");
//					if(curr.left != null) {
//						q.add(curr.left);
//					}
//					if(curr.right != null) {
//						q.add(curr.right);
//					}
//				}
//			}
//		}
//		
//		public static int height(Node root) {
//			if(root == null) {
//				return 0;
//			}
//			
//			return Math.max(height(root.left),height(root.right)) + 1;
//		}
//		
//		public static int count(Node root) {
//			if(root == null) {
//				return 0;
//			}
//			
//			return count(root.left) + count(root.right) + 1;
//		}
//		
//		public static int sum(Node root) {
//			if(root == null) {
//				return 0;
//			}
//			
//			return sum(root.left) + sum(root.right) + root.data;
//		}
//		
//		static class Info {
//			int diam;
//			int ht;
//			
//			public Info(int diam, int ht) {
//				this.diam = diam;
//				this.ht = ht;
//			}
//		}
//		
//		public static Info diameter(Node root) {
//			if(root == null) {
//				return new Info(0, 0);
//			}
//			
//			Info leftInfo = diameter(root.left);
//			Info rightInfo = diameter(root.right);
//			
//			int diam = Math.max(Math.max(leftInfo.diam, rightInfo.diam), leftInfo.ht + rightInfo.ht + 1);
//			int ht = Math.max(leftInfo.ht, rightInfo.ht) + 1;
//			
//			return new Info(diam, ht);
//		}
		
		
	}
	
	public static void main(String args[]) {
//		int nodes[] = {1, 2, 4, -1, -1, 5, -1, -1, 3, -1, 6, -1, -1};
//		
//		BinaryTree bt = new BinaryTree();
//		Node root = bt.buildTree(nodes);
//		System.out.println(root.data);
//		
//		int subnodes[] = {2, 4, -1, -1, 5, -1, -1};
//		BinaryTree subtree = new BinaryTree();
//		Node subroot = subtree.buildTree(subnodes);
//		System.out.println(root.data);
		
//		bt.levelOrder(root);
//		System.out.println(bt.sum(root));
		
//		System.out.println(bt.diameter(root).diam);
		
//		System.out.println(bt.isSubtree(root, subroot));
		
		Node root = new Node(1);
		root.left = new Node(2);
		root.right = new Node(3);
		root.left.left = new Node(4);
		root.left.right = new Node(5);
		root.right.left = new Node(6);
		
		Node subroot = new Node(2);
		subroot.left = new Node(4);
		subroot.right = new Node(5);
		
		System.out.println(isSubtree(root, subroot));
	}
}