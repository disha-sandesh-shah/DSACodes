import java.util.*;

public class Greedy {
	public static void main(String args[]) {
//		int start[] = {1, 3, 0, 5, 8, 5};
//		int end[] = {2, 4, 6, 7, 9, 9};
//		
//		int activities[][] = new int[start.length][3];
//		
//		for(int i=0; i<start.length; i++) {
//			activities[i][0] = i;
//			activities[i][1] = start[i];
//			activities[i][2] = end[i];
//		}
//		
//		Arrays.sort(activities, Comparator.comparingDouble(o -> o[2]));
//		
//		int ans = 0;
//		ArrayList<Integer> list = new ArrayList<>();
//		list.add(activities[0][0]);
//		ans = 1;
//		int lastEnd = activities[0][2];
//		
//		for(int i=1; i<end.length; i++) {
//			if(activities[i][1] >= lastEnd) {
//				ans++;
//				list.add(activities[i][0]);
//				lastEnd = activities[i][2];
//			}
//		}
//		
//		System.out.println("Total max activities " + ans);
//		for(int i=0; i<list.size(); i++) {
//			System.out.print(list.get(i) + " ");
//		}
//		System.out.println();
		
//		int val[] = {60, 100, 120};
//		int wt[] = {10, 20, 30};
//		int W = 50;
//		
//		double ratio[][] = new double[val.length][2];
//		
//		for(int i=0; i<val.length; i++) {
//			ratio[i][0] = i;
//			ratio[i][1] = val[i]/(double)wt[i];
//		}
//		
//		Arrays.sort(ratio, Comparator.comparingDouble(o -> o[1]));
//		
//		int maxProfit = 0;
//		int capacity = W;
//		for(int i=val.length-1; i>=0; i--) {
//			int idx = (int)ratio[i][0];
//			if(capacity >= wt[idx]) {
//				capacity -= wt[idx];
//				maxProfit += val[idx];
//			} else {
//				maxProfit += (capacity*ratio[i][1]);
//				capacity = 0;
//				break;
//			}
//		}
//		
//		System.out.println("Max profit = " +maxProfit);
		
//		int A[] = {4, 1, 8, 7};
//		int B[] = {2, 3, 6, 5};
//		
//		Arrays.sort(A);
//		Arrays.sort(B);
//		
//		int maxDiff = 0;
//		
//		for(int i=0; i<A.length; i++) {
//			maxDiff += Math.abs(A[i]-B[i]);
//		}
//		
//		System.out.println(maxDiff);
		
//		int pairs[][] = {{5, 24}, {39, 60}, {5, 28}, {27, 40}, {50, 90}};
//		
//		Arrays.sort(pairs, Comparator.comparingDouble(o -> o[1]));
//		
//		int chainLen = 1;
//		int lastEnd = pairs[0][1];
//		
//		for(int i=1; i<pairs.length; i++) {
//			if(pairs[i][0] > lastEnd) {
//				chainLen++;
//				lastEnd = pairs[i][1];
//			}
//		}
//		
//		System.out.println(chainLen);
		
//		Integer coins[] = {1, 2, 5, 10, 20, 50, 100, 500, 2000};
//		int amount = 590;
//		
//		Arrays.sort(coins);
//		int count = 0;
//		List<Integer> list = new ArrayList<>();
//		
//		for(int i=coins.length-1; i>=0; i--) {
//			if(amount >= coins[i]) {
//				while(amount >= coins[i]) {
//					list.add(coins[i]);
//					amount -= coins[i];
//					count++;
//				}
//			}
//		}
//		
//		System.out.println(count);
//		for(int i=0; i<list.size(); i++) {
//			System.out.print(list.get(i) + " ");
//		}
//		System.out.println();
		
//		int jobInfo[][] = {{4, 20}, {1, 10}, {1, 40}, {1, 30}};
//		
//		int jobs[][] = new int[jobInfo.length][3];
//		
//		for(int i=0; i<jobs.length; i++) {
//			jobs[i][0] = i;
//			jobs[i][1] = jobInfo[i][0];
//			jobs[i][2] = jobInfo[i][1];
//		}
//		
//		Arrays.sort(jobs, Comparator.comparingDouble(o -> o[2]));
//		int time = 0;
//		int profit = 0;
//		List<Integer> seq = new ArrayList<>();
//		
//		for(int i=jobs.length-1; i>=0; i--) {
//			if(jobs[i][1] > time) {
//				seq.add(jobs[i][0]);
//				profit += jobs[i][2];
//				time++;
//			}
//		}
//		
//		System.out.println(profit);
//		System.out.println(seq);
//		
//		
		
		int n = 4, m = 6;
		Integer costVer[] = {2, 1, 3, 1, 4};
		Integer costHor[] = {4, 1, 2};
		
		int v = 0, h = 0;
		int vp = 1, hp = 1;
		int cost = 0;
		
		while(v < costVer.length && h < costHor.length) {
			if(costVer[v] <= costHor[h]) {
				cost += costHor[h] * vp;
				hp++;
				h++;
			} else {
				cost += costVer[v] * hp;
				vp++;
				v++;
			}
		}
		
		while(h < costHor.length) {
			cost += costHor[h] * vp;
			hp++;
			h++;
		}
		
		while(v < costVer.length) {
			cost += costVer[v] * hp;
			vp++;
			v++;
		}
		
		System.out.println(cost);
		
	}
}