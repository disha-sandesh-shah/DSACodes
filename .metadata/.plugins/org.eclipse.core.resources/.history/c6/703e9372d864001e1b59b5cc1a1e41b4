public class Queue {
	static class CirQueue {
		static int arr[];
		static int size;
		static int front;
		static int rear;
		
		public CirQueue(int n) {
			arr = new int[n];
			size = n;
			front = -1;
			rear = -1;
		}
		
		public static boolean isEmpty() {
			return front == -1 && rear == -1;
		}
		
		public static boolean isFull() {
			return (rear+1)%size == front;
		}
		
		public static void add(int data) {
			if(isFull()) {
				System.out.println("Queue is Full");
				return;
			}
			
			if(front == -1) {
				front = 0;
			}
			
			rear = (rear + 1) % size;
			arr[rear] = data;
		}
		
		public static int remove() {
			if(isEmpty()) {
				return -1;
			}
			
			int result = arr[front];
			if(front == rear) {
				front = rear = -1;
			} else {
				front = (front + 1) % size;
			}
			
			return result;
		}
		
		public static int peek() {
			if(isEmpty()) {
				return -1;
			}
			
			return arr[front];
		}
	}
	static class QueueArr {
		static int arr[];
		static int size;
		static int rear;
		
		public QueueArr(int n) {
			arr = new int[n];
			size = n;
			rear = -1;
		}
		
		public static boolean isEmpty() {
			return rear == -1;
		}
		
		public static void add(int data) {
			if(rear == size-1) {
				System.out.println("Queue is full");
				return;
			}
			
			rear = rear + 1;
			arr[rear] = data;
		}
		
		public static int remove() {
			if(isEmpty()) {
				return -1;
			}
			
			int front = arr[0];	
			for(int i=0; i<rear; i++) {
				arr[i] = arr[i+1];
			}
			rear = rear - 1;
			
			return front;
		}
		
		public static int peek() {
			if(isEmpty()) {
				return -1;
			}
			
			return arr[0];
		}
	}
	public static void main(String args[]) {
		CirQueue q = new CirQueue(3);
		q.add(1);
		q.add(2);
		q.add(3);
		q.remove();
		q.add(4);
		q.remove();
		q.add(5);
		
		while(!q.isEmpty()) {
			System.out.print(q.peek() + " ");
			q.remove();
		}
		System.out.println();
	}
}