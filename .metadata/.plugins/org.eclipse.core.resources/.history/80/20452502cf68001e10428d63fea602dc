import java.util.*;

public class BinTree {
	static class Node {
		int data;
		Node right;
		Node left;
		
		public Node(int data) {
			this.data = data;
			this.left = null;
			this.right = null;
		}
	}
	
	static class BinaryTree {
		static int idx = -1;
		
		public static Node buildTree(int nodes[]) {
			idx++;
			if(nodes[idx] == -1) {
				return null;
			}
			
			Node newNode = new Node(nodes[idx]);
			newNode.left = buildTree(nodes);
			newNode.right = buildTree(nodes);
			
			return newNode;
		}
		
		public static void preorder(Node root) {
			if(root == null) {
				return;
			}
			
			System.out.print(root.data + " ");
			preorder(root.left);
			preorder(root.right);
		}
		
		public static void inorder(Node root) {
			if(root == null) {
				return;
			}
			
			inorder(root.left);
			System.out.print(root.data + " ");
			inorder(root.right);
		}
		
		public static void postorder(Node root) {
			if(root == null) {
				return;
			}
			
			postorder(root.left);
			postorder(root.right);
			System.out.print(root.data + " ");
		}
		
		public static void levelOrder(Node root) {
			if(root == null) {
				return;
			}
			
			Queue<Node> q = new LinkedList<>();
			q.add(root);
			q.add(null);
			
			while(!q.isEmpty()) {
				Node curr = q.remove();
				if(curr == null) {
					System.out.println();
					if(q.isEmpty()) {
						break;
					} else {
						q.add(null);
					}
				} else {
					System.out.print(curr.data + " ");
					if(curr.left != null) {
						q.add(curr.left);
					}
					if(curr.right != null) {
						q.add(curr.right);
					}
				}
			}
		}
		
		public static int height(Node root) {
			if(root == null) {
				return 0;
			}
			
			return Math.max(height(root.left),height(root.right)) + 1;
		}
		
		public static int count(Node root) {
			if(root == null) {
				return 0;
			}
			
			return count(root.left) + count(root.right) + 1;
		}
		
		public static int sum(Node root) {
			if(root == null) {
				return 0;
			}
			
			return sum(root.left) + sum(root.right) + root.data;
		}
	}
	
	public static void main(String args[]) {
		int nodes[] = {1, 2, 4, -1, -1, 5, -1, -1, 3, -1, 6, -1, -1};
		
		BinaryTree bt = new BinaryTree();
		Node root = bt.buildTree(nodes);
		System.out.println(root.data);
		
//		bt.levelOrder(root);
		System.out.println(bt.sum(root));
	}
}